// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: packing-records.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPackingRecords = `-- name: GetPackingRecords :many
SELECT id, datetime, pic_name, gross_weight, pack_a_qty, pack_b_qty, pack_c_qty, reject_weight, created_at
FROM packing_records
WHERE datetime BETWEEN $1 AND $2
ORDER BY datetime
`

type GetPackingRecordsParams struct {
	Datetime   pgtype.Timestamp `json:"datetime"`
	Datetime_2 pgtype.Timestamp `json:"datetime_2"`
}

func (q *Queries) GetPackingRecords(ctx context.Context, arg GetPackingRecordsParams) ([]PackingRecord, error) {
	rows, err := q.db.Query(ctx, getPackingRecords, arg.Datetime, arg.Datetime_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PackingRecord{}
	for rows.Next() {
		var i PackingRecord
		if err := rows.Scan(
			&i.ID,
			&i.Datetime,
			&i.PicName,
			&i.GrossWeight,
			&i.PackAQty,
			&i.PackBQty,
			&i.PackCQty,
			&i.RejectWeight,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newPackingRecord = `-- name: NewPackingRecord :one
INSERT INTO packing_records
  (datetime, pic_name, gross_weight, pack_a_qty, pack_b_qty, pack_c_qty, reject_weight)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING id, datetime, pic_name, gross_weight, pack_a_qty, pack_b_qty, pack_c_qty, reject_weight, created_at
`

type NewPackingRecordParams struct {
	Datetime     pgtype.Timestamp `json:"datetime"`
	PicName      string           `json:"pic_name"`
	GrossWeight  pgtype.Numeric   `json:"gross_weight"`
	PackAQty     int32            `json:"pack_a_qty"`
	PackBQty     int32            `json:"pack_b_qty"`
	PackCQty     int32            `json:"pack_c_qty"`
	RejectWeight pgtype.Numeric   `json:"reject_weight"`
}

func (q *Queries) NewPackingRecord(ctx context.Context, arg NewPackingRecordParams) (PackingRecord, error) {
	row := q.db.QueryRow(ctx, newPackingRecord,
		arg.Datetime,
		arg.PicName,
		arg.GrossWeight,
		arg.PackAQty,
		arg.PackBQty,
		arg.PackCQty,
		arg.RejectWeight,
	)
	var i PackingRecord
	err := row.Scan(
		&i.ID,
		&i.Datetime,
		&i.PicName,
		&i.GrossWeight,
		&i.PackAQty,
		&i.PackBQty,
		&i.PackCQty,
		&i.RejectWeight,
		&i.CreatedAt,
	)
	return i, err
}
